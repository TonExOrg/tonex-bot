;;
;; Header files for BorrowContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UserInfo$_store
builder $UserInfo$_store(builder build_0, (int, int, int, cell, cell) v) inline;

;; $UserInfo$_store_cell
cell $UserInfo$_store_cell((int, int, int, cell, cell) v) inline;

;; $UserInfo$_load
(slice, ((int, int, int, cell, cell))) $UserInfo$_load(slice sc_0) inline;

;; $UserInfo$_as_optional
tuple $UserInfo$_as_optional((int, int, int, cell, cell) v) inline;

;; $UserInfo$_load_opt
tuple $UserInfo$_load_opt(cell cl) inline;

;; $SetCreditScore$_load
(slice, ((slice, int))) $SetCreditScore$_load(slice sc_0) inline;

;; $Borrow$_load
(slice, ((slice, int, int))) $Borrow$_load(slice sc_0) inline;

;; $RedeemERC20$_load
(slice, ((slice, int))) $RedeemERC20$_load(slice sc_0) inline;

;; $PerformLiquidation$_load
(slice, ((slice))) $PerformLiquidation$_load(slice sc_0) inline;

;; $BorrowContract$_store
builder $BorrowContract$_store(builder build_0, (slice, int, int, int, cell) v) inline;

;; $BorrowContract$_load
(slice, ((slice, int, int, int, cell))) $BorrowContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $UserInfo$_not_null
((int, int, int, cell, cell)) $UserInfo$_not_null(tuple v) inline;

;; $BorrowContract$_contract_init
(slice, int, int, int, cell) $BorrowContract$_contract_init() impure inline_ref;

;; $BorrowContract$_contract_load
(slice, int, int, int, cell) $BorrowContract$_contract_load() impure inline_ref;

;; $BorrowContract$_contract_store
() $BorrowContract$_contract_store((slice, int, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $BorrowContract$_fun_calculateThresholdPercent
((slice, int, int, int, cell), int) $BorrowContract$_fun_calculateThresholdPercent((slice, int, int, int, cell) $self, int $creditScore) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $BorrowContract$_fun_forward
((slice, int, int, int, cell), ()) $BorrowContract$_fun_forward((slice, int, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $BorrowContract$_fun_notify
((slice, int, int, int, cell), ()) $BorrowContract$_fun_notify((slice, int, int, int, cell) $self, cell $body) impure inline;

;; $UserInfo$_constructor_creditScore_totalBorrowed_totalCollateral_erc20Collateral_nftCollateral
((int, int, int, cell, cell)) $UserInfo$_constructor_creditScore_totalBorrowed_totalCollateral_erc20Collateral_nftCollateral(int $creditScore, int $totalBorrowed, int $totalCollateral, cell $erc20Collateral, cell $nftCollateral) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
