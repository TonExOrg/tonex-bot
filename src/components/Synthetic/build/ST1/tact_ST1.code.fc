#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_ST1.headers.fc";
#include "tact_ST1.stdlib.fc";
#include "tact_ST1.constants.fc";
#include "tact_ST1.storage.fc";

;;
;; Contract ST1 functions
;;

(slice) $ST1$_contract_init() impure inline_ref {
    var (($self'deployer)) = (null());
    $self'deployer = __tact_context_get_sender();
    return ($self'deployer);
}

((slice), slice) $ST1$_fun_balance((slice) $self) impure inline_ref {
    var (($self'deployer)) = $self;
    return (($self'deployer), $Int$_fun_toCoinsString(__tact_my_balance()));
}

;;
;; Receivers of a Contract ST1
;;

(((slice)), ()) %$ST1$_internal_empty((slice) $self) impure inline {
    var ($self'deployer) = $self;
    __tact_debug_str(__gen_slice_string_22a6a2a99263a76cf7ab87fc0ed5e0f266dd926fac11446b1c38bc84fff439ad(), __gen_slice_string_39e80f5d522b56f22a05ec284d7a0024823614548645c07a4b4f45cb816a0d5c(), "File contracts/s_t1.tact:21:9:");
    return (($self'deployer), ());
}

(((slice)), ()) $ST1$_internal_binary_Withdraw((slice) $self, (int) $msg) impure inline {
    var ($self'deployer) = $self;
    var ($msg'amount) = $msg;
    int $amount = min($msg'amount, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000));
    throw_unless(54615, ($amount > 0));
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), true, $amount, 66));
    return (($self'deployer), ());
}

(((slice)), ()) $ST1$_internal_binary_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'deployer) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'deployer)~$ST1$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'deployer), ());
}

;;
;; Get methods of a Contract ST1
;;

_ %balance() method_id(104128) {
    var self = $ST1$_contract_load();
    var res = self~$ST1$_fun_balance();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract ST1
;;

((slice), int) $ST1$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$ST1$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 195467089) {
        var msg = in_msg~$Withdraw$_load();
        self~$ST1$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$ST1$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $ST1$_contract_load();
    
    ;; Handle operation
    int handled = self~$ST1$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $ST1$_contract_store(self);
}
